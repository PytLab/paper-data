#!/usr/bin/env python
rxn_expressions = [
    'CO_g + *_b -> CO_b',                       # CO adsorption at bridge site.
    'O2_g + 2*_b -> 2O_b',                      # O2 dissociative adsorption at two bridge sites.
    'CO_b + O_b <-> CO-O_2b -> CO2_g + 2*_b',   # CO2_g associative desorption
    'CO_b + *_t <-> CO_t + *_b -> CO_b + *_t',  # CO diffusion.
    'O_b + *_t <-> O_t + *_b -> O_b + *_t',     # O diffusion
]

# Gas pressure.
species_definitions = {}
species_definitions['CO_g'] = {'pressure': 1.32e-7}    # define the gas pressures
species_definitions['O2_g'] = {'pressure': 5.16e-7}  # 0.094
species_definitions['CO2_g'] = {'pressure': 1.32e-7}

# Site info.
species_definitions['b'] = {'site_name': 'bridge', 'type': 'site', 'total': 0.5}
species_definitions['t'] = {'site_name': 'top', 'type': 'site', 'total': 0.5}

# Temperature.
temperature = 500  # K

# Lattice information.
surface_name = 'Pt-100'

# Unitcell.
cell_vectors = [[3.0, 0.0, 0.0],
                [0.0, 3.0, 0.0],
                [0.0, 0.0, 3.0]]

basis_sites = [[0.0, 0.0, 0.0],
               [0.0, 0.5, 0.0],
               [0.5, 0.0, 0.0],
               [0.5, 0.5, 0.0]]

unitcell_area = 9.0e-20  # m^2
active_ratio = 4./9        # Ast / Auc

# Supercell.
repetitions = (30, 30, 1)   # (x, y, z)
periodic = (True, True, False)           # periodic boundary condition
possible_element_types = ["O_u", "O_d", "O_l", "O_r", "V", "O_s", "C"]
empty_type = "V"
possible_site_types = ["P"]


# KMC model attributes.
# specify tools for model to use
tools = ['parser', 'solver', 'corrector']
parser = 'KMCParser'  # default
solver = 'KMCSolver'
corrector = "ThermodynamicCorrector"

# KMC loop control parameters.
nstep = 80000                     # number of KMC loop step
seed = 1399999986                         # seed for random number generator
random_generator = 'MT'              # type of pseudo random number generator, 'MT' | 'MINSTD' | 'RANLUX24' | 'RANLUX48'
analysis = ["CoveragesAnalysis", "TOFAnalysis", "FrequencyAnalysis"]
analysis_interval = [nstep//100, 1, 1]
coverage_ratios = [1.0, 0.5, 0.5, 1.0]
#tof_start = 20000
time_limit = 5e5
trajectory_dump_interval = nstep//50
tof_interval = 600

do_redistribution = True
redistribution_interval = 300
distributor_type = "ProcessRandomDistributor"
rate_algo = "CT"

